openapi: 3.0.3
info:
  title: Anybase API
  description: |
    Anybase is a flexible database management system that provides a unified API for working with different database backends (MongoDB, PostgreSQL).
    It offers collection management, document CRUD operations, user authentication, and access control.
  version: 1.0.0
  contact:
    name: Anybase Support
    url: https://github.com/madhouselabs/anybase
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.anybase.io/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Collections
    description: Collection management operations
  - name: Data
    description: Document CRUD operations
  - name: Views
    description: View management operations
  - name: Users
    description: User management endpoints
  - name: Access Keys
    description: API access key management
  - name: Settings
    description: User and system settings

security:
  - BearerAuth: []
  - AccessKeyAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required:
                - refresh_token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      responses:
        '200':
          description: Successfully logged out
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
                  minLength: 8
              required:
                - current_password
                - new_password
      responses:
        '200':
          description: Password changed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Collection Endpoints
  /collections:
    get:
      tags:
        - Collections
      summary: List all collections
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Collections
      summary: Create a new collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Collection already exists

  /collections/{name}:
    get:
      tags:
        - Collections
      summary: Get collection details
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Collections
      summary: Update collection
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionRequest'
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Collections
      summary: Delete collection
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /collections/{name}/indexes:
    get:
      tags:
        - Collections
      summary: List collection indexes
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of indexes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Index'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Collections
      summary: Create index on collection
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
      responses:
        '201':
          description: Index created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /collections/{name}/indexes/{index}:
    delete:
      tags:
        - Collections
      summary: Delete index from collection
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: index
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Index deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # Data Endpoints
  /data/{collection}:
    get:
      tags:
        - Data
      summary: Query documents in collection
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
            description: JSON filter object
        - name: sort
          in: query
          schema:
            type: string
            description: JSON sort object
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: projection
          in: query
          schema:
            type: string
            description: JSON projection object
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Data
      summary: Insert document into collection
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '201':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /data/{collection}/{id}:
    get:
      tags:
        - Data
      summary: Get document by ID
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Data
      summary: Update document
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Document updated successfully
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Data
      summary: Delete document
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # User Management
  /users/profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Users
      summary: Update current user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfile'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /admin/users:
    get:
      tags:
        - Users
      summary: List all users (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Users
      summary: Create new user (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Access Keys
  /access-keys:
    get:
      tags:
        - Access Keys
      summary: List access keys
      responses:
        '200':
          description: List of access keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessKey'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Access Keys
      summary: Create new access key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessKeyRequest'
      responses:
        '201':
          description: Access key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessKeyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /access-keys/{id}:
    get:
      tags:
        - Access Keys
      summary: Get access key details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access key details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessKey'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Access Keys
      summary: Update access key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessKeyRequest'
      responses:
        '200':
          description: Access key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessKey'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Access Keys
      summary: Delete access key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access key deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /access-keys/{id}/regenerate:
    post:
      tags:
        - Access Keys
      summary: Regenerate access key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access key regenerated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessKeyResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Views
  /views:
    get:
      tags:
        - Views
      summary: List all views
      responses:
        '200':
          description: List of views
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/View'

    post:
      tags:
        - Views
      summary: Create new view
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateViewRequest'
      responses:
        '201':
          description: View created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'

  /views/{name}:
    get:
      tags:
        - Views
      summary: Get view details
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: View details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Views
      summary: Update view
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViewRequest'
      responses:
        '200':
          description: View updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Views
      summary: Delete view
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: View deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /views/{name}/query:
    get:
      tags:
        - Views
      summary: Query view
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
            description: Additional filter to apply
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: View query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Settings
  /settings/user:
    get:
      tags:
        - Settings
      summary: Get user settings
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

    put:
      tags:
        - Settings
      summary: Update user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Settings updated successfully

  /settings/system:
    get:
      tags:
        - Settings
      summary: Get system settings
      responses:
        '200':
          description: System settings
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

    put:
      tags:
        - Settings
      summary: Update system settings (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Settings updated successfully
        '403':
          $ref: '#/components/responses/Forbidden'

  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, unhealthy]
                  time:
                    type: integer
        '503':
          description: Service unavailable

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

    AccessKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API access key for programmatic access

  schemas:
    # Authentication
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
      required:
        - email
        - password
        - first_name
        - last_name

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
        user:
          $ref: '#/components/schemas/UserProfile'

    # Collections
    Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        schema:
          type: object
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/Index'
        permissions:
          $ref: '#/components/schemas/Permissions'
        settings:
          $ref: '#/components/schemas/CollectionSettings'
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        document_count:
          type: integer

    CreateCollectionRequest:
      type: object
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
        schema:
          type: object
          description: JSON Schema for validation
        indexes:
          type: array
          items:
            type: object
            properties:
              fields:
                type: object
                additionalProperties:
                  type: integer
                  enum: [1, -1]
              unique:
                type: boolean
                default: false
        permissions:
          $ref: '#/components/schemas/Permissions'
        settings:
          $ref: '#/components/schemas/CollectionSettings'
      required:
        - name

    UpdateCollectionRequest:
      type: object
      properties:
        schema:
          type: object
        permissions:
          $ref: '#/components/schemas/Permissions'
        settings:
          $ref: '#/components/schemas/CollectionSettings'

    CollectionSettings:
      type: object
      properties:
        versioning:
          type: boolean
          default: false
        soft_delete:
          type: boolean
          default: false
        auditing:
          type: boolean
          default: false
        encryption:
          type: boolean
          default: false
        max_documents:
          type: integer
          default: 0
        max_size_bytes:
          type: integer
          default: 0

    # Indexes
    Index:
      type: object
      properties:
        name:
          type: string
        fields:
          type: object
          additionalProperties:
            type: integer
            enum: [1, -1]
        unique:
          type: boolean
          default: false
        sparse:
          type: boolean
          default: false

    CreateIndexRequest:
      type: object
      properties:
        name:
          type: string
        keys:
          type: object
          additionalProperties:
            type: integer
            enum: [1, -1]
        options:
          type: object
          properties:
            unique:
              type: boolean
            sparse:
              type: boolean
      required:
        - name
        - keys

    # Documents
    Document:
      type: object
      properties:
        id:
          type: string
        collection:
          type: string
        data:
          type: object
          additionalProperties: true
        created_by:
          type: string
        updated_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer

    QueryResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    # Users
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [admin, developer, viewer]
        email_verified:
          type: boolean
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
        email_verified:
          type: boolean

    UpdateUserProfile:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [admin, developer, viewer]
      required:
        - email
        - password
        - first_name
        - last_name
        - role

    # Access Keys
    AccessKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time
        last_used_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    CreateAccessKeyRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time
      required:
        - name

    UpdateAccessKeyRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time

    AccessKeyResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        key:
          type: string
          description: The actual API key (only shown once)
        expires_at:
          type: string
          format: date-time

    # Views
    View:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        collection:
          type: string
        pipeline:
          type: array
          items:
            type: object
        fields:
          type: object
        filter:
          type: object
        permissions:
          $ref: '#/components/schemas/Permissions'
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateViewRequest:
      type: object
      properties:
        name:
          type: string
        collection:
          type: string
        pipeline:
          type: array
          items:
            type: object
        fields:
          type: object
        filter:
          type: object
        permissions:
          $ref: '#/components/schemas/Permissions'
      required:
        - name
        - collection

    UpdateViewRequest:
      type: object
      properties:
        pipeline:
          type: array
          items:
            type: object
        fields:
          type: object
        filter:
          type: object
        permissions:
          $ref: '#/components/schemas/Permissions'

    # Permissions
    Permissions:
      type: object
      properties:
        read:
          $ref: '#/components/schemas/Permission'
        write:
          $ref: '#/components/schemas/Permission'
        update:
          $ref: '#/components/schemas/Permission'
        delete:
          $ref: '#/components/schemas/Permission'

    Permission:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
        users:
          type: array
          items:
            type: string
        conditions:
          type: object
        public:
          type: boolean
          default: false

    # Error Response
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'